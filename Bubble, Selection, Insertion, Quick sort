#include <bits/stdc++.h>
using namespace std;
#define fastio()                      \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);                    \
    cout.tie(NULL);
#define lli long long int
#define ll long long
#define pii pair<int,int>
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<ll>
#define vvl vector<vl> 


void my_swap(int& x,int& y) {
    if(&x == &y) {
        return; // this is imp if both x and y are references to the same var
    }
    
    x = x^y;
    y = x^y;
    x = x^y;
}


/////////////////// bubble, selection and insertion sort //////////////////

/*
all three by apna college: https://www.youtube.com/watch?v=PkJIc5tBRUE
microsoft vali didi

BUBBLE SORT:
name comes from the fact the bubbles in water reach the top, similarily here we push the heavier elements to the right

algo:
for n-1 phases:
traverse from left to right, starting from the first one, repeatedly swap consecutive elements (left,right)
if left element is greater than the right one
so, the heaviest element in the current array moves to the last of the current array
as heavier elements reach to the last array size decreases by one after each phase

optimization:
if at any phase there was no swapping done, then we can stop here itself and we don't need to execute other phases
we can use a flag here

why it works:
in the first phase the heaviest element gets pushed to last index and array on which we need to operate decrease by one 
in the second phase the second heaviest element get pushed to the second last index and array on which we need to operate 
decrease by one. we need only n-1 phases, because if we put n-1 elements at their correct places remaining element
already comes at its correct place

time complexity and stability: 
worst, avg case time = o(n^2)
best case time = o(n)
space = o(1)
best case => array is already sorted, if we optimize then best case time = o(n) when array is fully sorted, 
optimization is done by using swapped flag, if we remove that optimization is removed
worst case => array is sorted in descending order
stable = yes => 
when we talk about it stability, its about relative position of equal elements 
consider a case with two elements with value at 8 at indices 3 and 6, the 8 present at index 3 wont ever cross 8 
present at index 6 because the if condition doesnot have any equality sign

////////////////////////////////////////////////////////////////////////

INSERTION SORT:

algo:
array is divided into two regions sorted and unsorted, initially whole array is unsorted, unsorted region starts from i, 
we traverse from left to right, we need to insert the first element of current unsorted region (ie at the element at index i) 
at its correct index by right-shifting the elements of sorted array one by one if they are larger 
(not by swapping even though it could give the same result)

optimization:
no optimization needed, inner loop will only work if we have larger elements in left of index i

time complexity and stability: (best case and worst case scenarios and time complexity same as bubble sort)
worst, avg case time = o(n^2)
best case time = o(n)
space = o(1)
best case => array is already sorted, in best case inner loop doesnot work at all
worst case => array is sorted in descending order
stable = yes => 
when we talk about it stability, its about relative position of equal elements 
consider a case with two elements with value 2 at indices 4 and 5, and elements to the left of index 4 are greater than 2, 
then the 2 present at index 4 will reach to the first position and the one at 5 will react at the
second position from left and the 2 which was originally present at index 5 will never cross the one originally present
at index 4

extra:
in all cases other than the best case, both the loop runs till their bounds even though swapping occurs or not
only the best case the outer loop runs once so time = o(n)

bubble sort and insertion sort use consecutive swapping or shifting that's why they are stable

//////////////////////////////////////////////////////////////////
 
selection sort

array is divided into two areas sorted and unsorted, unsorted region starts with i, every time find the index of minimum element from the the unsorted area and put it at last of sorted area by swapping

so we need n-1 iterations

Best, average and worst case time complexity: n^2 which is independent of distribution of data. 
space = o(1)

stable: no => because here we are swapping distant elements unlike bubble and insertion sort

//////////////////////////////////////////////////////////////////////

Merge sort â€“ 
Best, average and worst case time complexity: nlogn which is independent of distribution of data. 
stable: yes => it could be made stable, rearrangement of elements takes place while merging so we need to make chngs there, while we put the elements into
the big array, we select the minmum b/n the two there we have

so if(a[i]<=b[j]) {
    i think that :here we must use equality sign also, so that even if two  elements are equal
    a[i] goes first because a[i] was left to b[j] because 'a' array is left to b
    that's it
} else {
    
}
 

Several common sorting algorithms are stable by nature, such as Merge Sort, Timsort, Counting Sort, Insertion Sort, and Bubble Sort. Others such as Quicksort, Heapsort and Selection Sort are unstable.


bubble, insertion, count, merge sort -> stable
selection, quick sort -> unstable

comparision based: bubble, insertion, selection, merge sort
non comparision based: radix, count sort

*/

//////////////////////////// bubble sort /////////////////////////////////


void bubble_sort(vector<int>& v) {
    int n = v.size();
    
    for(int i = 0; i < n-1; i++) {
        bool swapped = false;
        
        for(int j = 1; j < n-i; j++) {
            if(v[j-1] > v[j]) {
                // v[i] needs to go back
                my_swap(v[j-1], v[j]);
                swapped = true;
            }
        }
        
        if(!swapped) {
            // array has been sorted
            break;
        }
    }
}

//////////////////////////// selection sort /////////////////////////////////

void selection_sort(vector<int>& v) {
    int n = v.size();
    
    // i marks the start of unsorted region
    for(int i=0; i < n-1 ; i++) {
        int sm_idx = i; // idx of smallest element in the unsorted region
        
        for(int j = i+1; j < n ; j++) {
            if(v[j] < v[sm_idx]) {
                sm_idx = j;
            }
        }
        
        my_swap(v[i], v[sm_idx]);
    }
}

//////////////////////////// insertion sort /////////////////////////////////

void insertion_sort(vector<int>& v) {
    int n = v.size();
    
    // i marks the start of unsorted region
    for(int i = 1; i < n; i++) {
        int who = v[i];
        int j = i-1;
    
        while(j >= 0 && v[j] > who) {
            v[j+1] = v[j];
            j--;
        }
        
        j++;
        v[j] = who;
    }
}


//////////////////////////// quick sort /////////////////////////////////

/*

apna college youtube vdo:
https://www.youtube.com/watch?v=Dl6HT-NM_q4

placement course

divide and conquer recursive algo

algo:
choose a pivot(same for always) here we choose last element always 
partition the array around the pivot, ie all smaller elements on the left of pivot and all larger elements to the right of pivot
now recursively sort the left and right regions of pivot

algorithm for partition is important to look

i haven't used the partitioning algo from apna college
i have used the algo used for the standard problem from the pepcoding youtube video:
https://www.youtube.com/watch?v=if40LxQ8_Xo 

algo: 

i to n-1 => unknown region or the region on which we are operating 
j to i-1 => elements greater than pivot
0 to j-1 => elements lesser than pivot

here i is being incremented inside the for loop
code by sumit sir increments i inside the while loop body

best and avg case time comp = o(nlogn)

worst case time comp = o(n^2), this occurs when the given array is already asc or desc sorted, and the pivot is always the smallest or largest element

consider a case when given array is already sorted and pivot is the last element ie the largest one, in such case when we partition all the n-1 elements other than the last element will go in one partition and we will apply quick sort on an array of n-1 size, so we were just able to remove one element after partioning

best and avg cases include when partitioning happens such that the array gets divided into two equal sized arrays like in merge sort

Though the worst-case complexity of quicksort is more than other sorting algorithms such as Merge sort and Heap sort, still it is faster in practice. Worst case in quick sort rarely occurs because by changing the choice of pivot, it can be implemented in different ways. Worst case in quicksort can be avoided by choosing the right pivot element.

https://www.javatpoint.com/quick-sort#:~:text=Time%20Complexity,-Case&text=The%20average%20case%20time%20complexity,O(n*logn).

Space Complexity	O(n*logn)
stable: no => because here we are swapping distant elements unlike bubble and insertion sort

*/

int partition(vector<int>& v, int l, int r) {
    int n = v.size(), pvt = v[r];
    
    int j = 0;
    for(int i=0; i<n ; i++) {
        if(v[i] <= pvt) {
            my_swap(v[i], v[j]);
            j++;
        }
    }
    
    return j-1; // assuming there's a pvt element for sure
}

void quick_sort(vector<int>& v, int l, int r) {
    if(l >= r) {
        return;
    }
    
    int pvt_idx = partition(v, l, r);
    
    quick_sort(v, l, pvt_idx-1);
    quick_sort(v, pvt_idx+1, r);
}

////////////////////////////////////////////////////////////////////////

void print(vector<int>& v) {
    for(auto x: v) {
        cout << x << " ";
    }
    
    cout<<'\n';
}

vector<int> getArray() {
    vector<int> v = {1,2,3,4,5};
    
    // reverse(v.begin(),v.end());
    
    v = {7,8,3,1,2};
    
    return v;
}

void solve()
{
    int n=5;
    vector<int> v = getArray();
    
    v = getArray(); bubble_sort(v); print(v);
    
    v = getArray(); selection_sort(v); print(v);
    
    v = getArray(); insertion_sort(v); print(v);
    
    v = getArray(); quick_sort(v, 0, n-1); print(v);
    

    return;
}

int main()
{
    fastio();
    int t=1;
    // cin>>t;
    while(t--) solve();

    return 0;
}
