#include <bits/stdc++.h>
using namespace std;
#define fastio()                      \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);                    \
    cout.tie(NULL);
#define lli long long int
#define ll long long
#define pii pair<int,int>
#define pll pair<ll,ll>
#define tpiii tuple<int,int,int>
#define tplll tuple<ll,ll,ll>
// DS
#define vi vector<int>
#define vb vector<bool>
#define vl vector<ll>
#define vvi vector<vi>
#define vvl vector<vl> 
#define umap unordered_map
#define uset unordered_set
#define mset multiset
// Utilities
#define ff first
#define ss second
#define bg begin()
#define ed end()
#define pb push_back
#define ppb pop_back
ll mod1=1e9+7;
ll mod2=1e9+7;
// Functions
ll mod_add(ll x,ll y,ll m) { return ((x%m)+(y%m))%m; }
ll mod_mul(ll x,ll y,ll m) { return ((x%m)*(y%m))%m; }

/*
Input:

4 5 1
1 4
2 2 
3 3
9 1

Output:

20 7 11 4 

*/


struct Task {
    int arr, dur, idx;
};

bool cmp_vec(struct Task a, struct Task b) {
    return a.arr < b.arr;
}

struct cmp {
    public:
    bool operator() (struct Task a, struct Task b) {
        return a.dur > b.dur;
    }
};


void solve()
{
    int n,k,w; cin>>n>>k>>w;
    
    vector<Task> v(n);
    for(int i=0; i<n; i++) {
        cin >> v[i].arr >> v[i].dur;
        v[i].idx = i;
    }
    
    sort(v.begin(), v.end(), cmp_vec); // sort by arrival time
    
    priority_queue<Task, vector<Task>, cmp> pq;
    
    vector<int> ans(n);
    int i=0, t=0;
    
    while(i<n) {
        while(i<n && v[i].arr<=t) {
            pq.push(v[i]);
            i++;
        }
        
        if(pq.empty()) {
            t++;
            continue;
        }
        
        struct Task curr = pq.top();
        pq.pop();

        int cost = k*curr.dur;
        int discount = w*(t-curr.arr);
        ans[curr.idx] = cost-discount;
        
        t+=curr.dur;
    }
    
    for(auto x: ans) {
        cout << x << " ";
    }
    
    cout << '\n';
    
    return;
}

int main()
{
    fastio();
    int t=1;
    // cin>>t;
    while(t--) solve();

    return 0;
}
